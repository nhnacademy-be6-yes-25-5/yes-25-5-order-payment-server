name: Java CD with Maven

on:
  push:
    branches: [ "develop" ]

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Deploy to Remote Server
        if: success()
        env:
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_DEPLOY_PATH: ${{ secrets.REMOTE_DEPLOY_PATH }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          ssh -i private_key.pem -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << 'EOF'
          pkill -f 'yes-25-5-order-payment-server-0.0.1-SNAPSHOT.jar'
          EOF

          scp -i private_key.pem -o StrictHostKeyChecking=no target/yes-25-5-order-payment-server-0.0.1-SNAPSHOT.jar $REMOTE_USER@$REMOTE_HOST:$REMOTE_DEPLOY_PATH

          ssh -i private_key.pem -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << 'EOF'
          nohup java -jar $REMOTE_DEPLOY_PATH/yes-25-5-order-payment-server-0.0.1-SNAPSHOT.jar > /dev/null 2>&1 &
          EOF

          rm private_key.pem

      - name: Send Dooray Webhook on Success
        if: success()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "주문 결제 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "주문 및 결제 서버의 배포가 성공했어요!",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "green",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }

      - name: Send Dooray Webhook on Failure
        if: failure()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_ACTOR: ${{ github.actor }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "주문 결제 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "주문 및 결제 서버의 배포가 실패했어요...",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "red",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }
