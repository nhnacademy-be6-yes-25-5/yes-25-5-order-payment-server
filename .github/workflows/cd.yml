name: Java CD with Docker

on:
  push:
    branches: [ "develop", "main" ]

permissions: write-all

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/github_rsa
          chmod 400 ~/.ssh/github_rsa
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Clean Remote Directory
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "rm -rf ${REMOTE_DIR}/*"

      - name: Copy project files to Remote Server for 8070
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no Dockerfile-8070 ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/Dockerfile-8070
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no pom.xml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/pom.xml
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no -r src ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/src
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no -r src/main/resources/application-prod.yml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/src/main/resources/application-prod.yml

      - name: Deploy JAR on Remote Server - Port 8070
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
          YES25_5_MYSQL_PASSWORD: ${{ secrets.YES25_5_MYSQL_PASSWORD }}
          YES25_5_REDIS_PASSWORD: ${{ secrets.YES25_5_REDIS_PASSWORD }}
          PAYMENT_SECRET: ${{ secrets.PAYMENT_SECRET }}
          EUREKA_SERVER_HOSTNAME: ${{ secrets.EUREKA_SERVER_HOSTNAME }}
          EUREKA_SERVER_PORT: ${{ secrets.EUREKA_SERVER_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          BOOK_USER_SERVER: ${{ secrets.BOOK_USER_SERVER }}
          COUPON_SERVER: ${{ secrets.COUPON_SERVER }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} << EOF
            cd ${REMOTE_DIR}
            docker build -t order-payment-app-8070 -f Dockerfile-8070 .
            docker stop order-payment-app-8070 || true
            docker rm order-payment-app-8070 || true
            docker run -d -p 8070:8070 --name order-payment-app-8070 \
              -e EUREKA_SERVER_HOSTNAME=${EUREKA_SERVER_HOSTNAME} \
              -e EUREKA_SERVER_PORT=${EUREKA_SERVER_PORT} \
              -e YES25_5_MYSQL_PASSWORD=${YES25_5_MYSQL_PASSWORD} \
              -e YES25_5_REDIS_PASSWORD=${YES25_5_REDIS_PASSWORD} \
              -e PAYMENT_SECRET=${PAYMENT_SECRET} \
              -e JWT_SECRET=${JWT_SECRET} \
              -e BOOK_USER_SERVER=${BOOK_USER_SERVER} \
              -e COUPON_SERVER=${COUPON_SERVER} \
              -e RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD} \
              order-payment-app-8070
          EOF

      - name: Check if 8070 is up
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
        run: |
          until ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "curl -s http://${REMOTE_HOST}:8070/actuator/health | grep -q '\"status\":\"UP\"'"; do
            echo "Waiting for 8070 to be up..."
            sleep 10
          done

      - name: Copy project files to Remote Server for 8071
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no Dockerfile-8071 ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/Dockerfile-8071
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no pom.xml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/pom.xml
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no -r src ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/src
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no -r src/main/resources/application-prod.yml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/src/main/resources/application-prod.yml

      - name: Deploy JAR on Remote Server - Port 8071
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
          YES25_5_MYSQL_PASSWORD: ${{ secrets.YES25_5_MYSQL_PASSWORD }}
          YES25_5_REDIS_PASSWORD: ${{ secrets.YES25_5_REDIS_PASSWORD }}
          PAYMENT_SECRET: ${{ secrets.PAYMENT_SECRET }}
          EUREKA_SERVER_HOSTNAME: ${{ secrets.EUREKA_SERVER_HOSTNAME }}
          EUREKA_SERVER_PORT: ${{ secrets.EUREKA_SERVER_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          BOOK_USER_SERVER: ${{ secrets.BOOK_USER_SERVER }}
          COUPON_SERVER: ${{ secrets.COUPON_SERVER }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
        run: |
          ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} << EOF
            cd ${REMOTE_DIR}
            docker build -t order-payment-app-8071 -f Dockerfile-8071 .
            docker stop order-payment-app-8071 || true
            docker rm order-payment-app-8071 || true
            docker run -d -p 8071:8071 --name order-payment-app-8071 \
              -e EUREKA_SERVER_HOSTNAME=${EUREKA_SERVER_HOSTNAME} \
              -e EUREKA_SERVER_PORT=${EUREKA_SERVER_PORT} \
              -e YES25_5_MYSQL_PASSWORD=${YES25_5_MYSQL_PASSWORD} \
              -e YES25_5_REDIS_PASSWORD=${YES25_5_REDIS_PASSWORD} \
              -e PAYMENT_SECRET=${PAYMENT_SECRET} \
              -e JWT_SECRET=${JWT_SECRET} \
              -e BOOK_USER_SERVER=${BOOK_USER_SERVER} \
              -e COUPON_SERVER=${COUPON_SERVER} \
              -e RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD} \
              order-payment-app-8071
          EOF

      - name: Check if 8071 is up
        env:
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
        run: |
          until ssh -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "curl -s http://${REMOTE_HOST}:8071/actuator/health | grep -q '\"status\":\"UP\"'"; do
            echo "Waiting for 8071 to be up..."
            sleep 10
          done

      - name: Send Deployment Status to Dooray
        if: success()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_ACTOR: ${{ github.actor }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "게이트웨이 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "게이트웨이 서버의 배포가 성공적으로 완료되었습니다!",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "green",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }

      - name: Send Deployment Failure to Dooray
        if: failure()
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_ACTOR: ${{ github.actor }}
          DOORAY_WEBHOOK_URL: ${{ secrets.DOORAY_WEBHOOK_URL }}
        with:
          script: |
            const webhookUrl = process.env.DOORAY_WEBHOOK_URL;
            const payload = {
              botName: "게이트웨이 서버 Bot",
              botIconImage: "https://www.tistory.com/favicon.ico",
              text: "게이트웨이 서버의 배포가 실패했습니다...",
              attachments: [
                {
                  title: "Pull Request URL",
                  titleLink: process.env.PR_URL,
                  color: "red",
                  text: `PR 제목: ${process.env.PR_TITLE}, PR 작성자: ${process.env.PR_ACTOR}`
                }
              ]
            };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              throw new Error(`Failed to send webhook: ${response.statusText}`);
            }
